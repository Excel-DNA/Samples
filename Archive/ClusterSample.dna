<DnaLibrary RuntimeVersion="v4.0" Name='Excel-Dna ClusterSample' Language='C#'>
<![CDATA[
using System;
using System.Collections.Generic;
using ExcelDna.Integration;

public static class DnaTestFunctions
{
    public static double DnaAddThem(double val1, double val2)
    {
        return val1 + val2;
    }

    [ExcelFunction(IsClusterSafe=true)]
    public static double DnaAddThemC(double val1, double val2)
    {
        return val1 + val2;
    }
    
    [ExcelFunction(IsClusterSafe=true)]
    public static string DnaCheckRunningOnCluster()
    {
        XlCall.XlReturn retval;
        object result;

        retval = XlCall.TryExcel(XlCall.xlRunningOnCluster, out result);
        
        if (retval == XlCall.XlReturn.XlReturnSuccess)
        {
            return result.ToString();
        }
        
        return "Error - maybe not running on Excel 2010?";
    }
    
    /*
    ** DnaCountPrimes
    ** This function counts the number of primes in the specified range and returns the result.
    */
    public static int DnaCountPrimes(int nFrom, int nTo)
    {
        double[] list = DnaFindPrimes(nFrom, nTo) as double[];
        return list.Length;
    }

    /*
    ** DnaCountPrimesC
    ** This function counts the number of primes in the specified range and returns the result.
    ** This function is marked cluster-safe.
    */
    [ExcelFunction(IsClusterSafe=true)]
    public static int DnaCountPrimesC(int nFrom, int nTo)
    {
        return DnaCountPrimes(nFrom, nTo);
    }

    /*
    ** DnaFindPrimes
    ** This function finds the primes in the specified range and returns as an array of doubles.
    */
    public static object DnaFindPrimes(int nFrom, int nTo)
    {
        List<double> gotPrimes = new List<double>();    // Convenient since Excel-Dna has marshaling support for double()
        int gotTotal = 0;
        for(int iter = nFrom; iter <= nTo; iter++)
        {
            bool notMe = false;
            int root = (int)Math.Sqrt((double) iter); //don't need to add one since a perfect root won't round down
            for (int fpr = 2; fpr <= root; fpr++)
            {
                if (iter % fpr == 0)
                {
                    notMe = true;
                    break;
                }
            }

            if (!notMe)
            {
                gotTotal++;
                gotPrimes.Add((double)iter);
            }
        }

        return gotPrimes.ToArray();
    }

    [ExcelFunction(IsClusterSafe=true)]
    public static object DnaFindPrimesC(int nFrom, int nTo)
    {
        return DnaFindPrimes(nFrom, nTo);
    }

    /*
    ** BusyCalc
    ** This function takes about 30ms to execute and uses the CPU the whole time.
    */
    static void BusyCalc()
    {
        double x = 0;
        for (int i = 0; i < 100000; i++) 
        {
            x += i*i + x*x ;
        }
    }

    /*
    ** BusyWait
    ** This function makes the CPU busy for the specified amount of time, in milliseconds.
    */
    static void BusyWait(int ms)
    {	
        int t1 = Environment.TickCount;
        while (true) 
        {
            int t2 = Environment.TickCount;
            if ((t2-t1) < ms) 
            {
                BusyCalc();
            }
            else 
            {
                break;
            }
        }	
    }

    /*
    ** DnaDelayEcho, DnaDelayEchoC
    **
    ** This function returns its input after waiting the specified amount of time and keeping the CPU busy.
    **
    */
    public static object DnaDelayEcho(int delay, object oper)
    {
        BusyWait(delay * 1000);
        return oper;
    }
    
    [ExcelFunction(IsClusterSafe=true)]
    public static object DnaDelayEchoC(int delay, object oper)
    {
        return DnaDelayEcho(delay, oper);
    }

    /*
    ** DnaGetComputerName, DnaGetComputerNameC
    ** This function returns the name of the computer on which it executes.
    */
    public static string DnaGetComputerName()
    {
        return Environment.MachineName;
    }

    [ExcelFunction(IsClusterSafe=true)]
    public static string DnaGetComputerNameC()
    {
        return DnaGetComputerName();
    }
}

]]>
</DnaLibrary>
