<DnaLibrary RuntimeVersion="v4.0" Name="RTD Server Tests" Language="C#">
    <Reference AssemblyPath="System.Windows.Forms.dll" />
    <![CDATA[
    
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    using System.Net;
    using System.Xml;
    using System.Runtime.InteropServices;
    using System.Diagnostics;
    using System.Windows.Forms;
    using ExcelDna.Integration;
    using ExcelDna.Integration.Rtd;
     
    public static class TestRtdFunctions
    {

        [ExcelFunction(Name = "Test")] 
        public static object[,] Test(string name) 
        { 
            object result = XlCall.RTD("MyRTDServers.TimeServer", null, "NOW");
            return new object[,] {{result}}; 
        } 
    
      public static object WhatTimeIsIt()
      {
        return XlCall.RTD("MyRTDServers.TimeServer", null, "NOW");
      }


      static string _dataPath;

      static TestRtdFunctions()
      {
         string xllDir = Path.GetDirectoryName((string)XlCall.Excel(XlCall.xlGetName));
         _dataPath = Path.Combine(xllDir, "Test.xml");
      }

      public static object GetTestItem(string itemPath)
      {
        return XlCall.RTD("MyRTDServers.TestServer", null, _dataPath, itemPath);
      }

      public static object GetEurOnd()
      {
        return GetTestItem("EUR/OND");
      }      
  }

  namespace MyRTDServers
  {

    // Need Guid here to support direct =RTD(...).
    // Call Regsvr32 <MyAddin>.xll 
    // or ComServer.DllRegisterServer() 
    // to register.
    // [ProgId("TestComServer.TimeServer"), 
    [Guid("069F88AB-840D-4149-A33F-286BDD69CE48")]
    [ComVisible(true)]
    public class TimeServer : IRtdServer
    {
        private IRTDUpdateEvent _callback;
        private Timer _timer;
        private int _topicId;

        #region IRtdServer Members

        public object ConnectData(int topicId, ref Array Strings, ref bool GetNewValues)
        {
            Console.Beep();
            _topicId = topicId;
            _timer.Start();
            return GetTime();
        }

        public void DisconnectData(int topicId)
        {
        
            _timer.Stop();
        }

        public int Heartbeat()
        {
            return 1;
        }

        public Array RefreshData(ref int topicCount)
        {
            object[,] results = new object[2, 1];
            results[0, 0] = _topicId;
            results[1, 0] = GetTime();

            topicCount = 1;
            _timer.Start();
            
            return results;
        }

        public int ServerStart(IRTDUpdateEvent CallbackObject)
        {
            Console.Beep();
            Console.Beep();
            Console.Beep();
            _callback = CallbackObject;
            _timer = new Timer();
            _timer.Tick += Callback;
            _timer.Interval = 500;
            return 1;
        }

        public void ServerTerminate()
        {
            Console.Beep();
            Console.Beep();
            if (_timer!=null)
            {
              _timer.Dispose();
              _timer = null;
            }
        }

        #endregion

        private void Callback(object sender, EventArgs e)
        {
            _timer.Stop();
            _callback.UpdateNotify();
        }
        
        private string GetTime()
        {
          return DateTime.Now.ToString("HH:mm:ss.fff");
        }
    }
    
    [ComVisible(true)]
    public class TestServer : IRtdServer
    {
        private Dictionary<int, Topic> _topics;
        private IRTDUpdateEvent _callback;
        private System.Windows.Forms.Timer _timer;
        private XmlDocument _xml;

        #region IRtdServer Members

        public object ConnectData(int TopicID, ref Array Strings, ref bool GetNewValues)
        {
            if (Strings.Length != 2)
            {
                throw new Exception("Expecting TICKER");
            }

            string filename = Strings.GetValue(0) as string;
            if (filename == null || filename.Length == 0)
            {
                throw new Exception("Expecting FILENAME");
            }
            string ticker = Strings.GetValue(1) as string;
            if (ticker == null || ticker.Length == 0)
            {
                throw new Exception("Expecting TICKER");
            }

            _topics.Add(TopicID, new Topic(filename, ticker));

            return "Queued";
        }

        public void DisconnectData(int TopicID)
        {
            _topics.Remove(TopicID);
        }

        public int Heartbeat()
        {
            return 1;
        }

        public Array RefreshData(ref int TopicCount)
        {
            object[,] results = new object[2, _topics.Count];
            TopicCount = 0;

            foreach (int topicID in _topics.Keys)
            {
                if (_topics[topicID].Updated == true)
                {
                    results[0, TopicCount] = topicID;
                    results[1, TopicCount] = _topics[topicID].Value + " : " + Convert.ToString(DateTime.Now);
                    TopicCount++;
                }
            }

            object[,] temp = new object[2, TopicCount];
            for (int i = 0; i < TopicCount; i++)
            {
                temp[0, i] = results[0, i];
                temp[1, i] = results[1, i];
            }

            return temp;
        }

        public int ServerStart(IRTDUpdateEvent CallbackObject)
        {
            _topics = new Dictionary<int, Topic>();
            _callback = CallbackObject;
            _timer = new System.Windows.Forms.Timer();
            _timer.Tick += Callback;
            _timer.Interval = 2000;
            _timer.Start();
            _xml = new XmlDocument();

            return 1;
        }

        public void ServerTerminate()
        {
            _timer.Dispose();
            _topics = null;
            _xml = null;
        }

        #endregion

        private void Callback(object sender, EventArgs e)
        {

            lock (_topics)
            {
                try
                {
                    foreach (KeyValuePair<int, Topic> x in _topics)
                    {
                        GetDataFromXML(x.Value);
                    }
                }
                catch (Exception)
                {
                }
            }

            _callback.UpdateNotify();
        }

        private void GetDataFromXML(Topic topic)
        {
            _xml.Load(topic.FileName);
            XmlNode node = _xml.SelectSingleNode("//" + topic.Ticker);
            topic.Value = node.InnerText;
        }
    }

    public class Topic
    {
        private string iFileName;
        private string iTicker;
        private string iValue;
        private bool iUpdated;
        public string FileName
        {
            get { return iFileName; }
            set { iFileName = value; }
        }
        public string Ticker
        {
            get { return iTicker; }
            set { iTicker = value; }
        }
        public string Value
        {
            get { return iValue; }
            set
            {
                if (iValue != value)
                {
                    iValue = value;
                    iUpdated = true;
                }
                else
                {
                    iUpdated = false;
                }
            }
        }
        public bool Updated
        {
            get { return iUpdated; }
            set { iUpdated = value; }
        }

        public Topic(string File, string TickerName)
        {
            iFileName = File;
            iTicker = TickerName;
            iValue = "";
        }
    }
  }
  ]]>
</DnaLibrary>
