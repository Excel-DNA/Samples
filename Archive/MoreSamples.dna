<DnaLibrary RuntimeVersion="v4.0" Name="ExcelDna Test AddIn">
	<!-- This library has two projects, one in C#, the other in VB -->
	<Project Language="CS">
		<Reference Path="System.Windows.Forms.dll"/>
			<![CDATA[
			using System;
			using System.Windows.Forms;
			using ExcelDna.Integration;

			// The class here implements the ExcelDna.Integration.IExcelAddIn interface.
			// This allows the add-in to run code at start-up and shutdown.
			public class MyAddIn : IExcelAddIn
			{
				public void AutoOpen()
				{
					MessageBox.Show("Now in AutoOpen.");
				}
				
				public void AutoClose()
				{
					MessageBox.Show("Now in AutoClose.");
				}
			}

			public class MyFunctions
			{
				// This function returns a string that describes its argument.
				// For arguments defined as object type, this shows all the possible types that may be received.
				// Also try this function after changing the 
				// [ExcelArgument(AllowReference=true)] attribute.
				// In that case we allow references to be passed (registerd as type R). 
				// By default the function will be registered not
				// to receive references AllowReference=false (type P).
				[ExcelFunction(Description="Describes the value passed to the function.", IsMacroType=true)]
				public static string Describe([ExcelArgument(AllowReference=false)]object arg)
				{
						if (arg is double)
							return "Double: " + (double)arg;
						else if (arg is string)
							return "String: " + (string)arg;
						else if (arg is bool)
							return "Boolean: " + (bool)arg;
						else if (arg is ExcelError)
							return "ExcelError: " + arg.ToString();
						else if (arg is object[,])
							// The object array returned here may contain a mixture of different types,
							// reflecting the different cell contents.
							return string.Format("Array[{0},{1}]", ((object[,])arg).GetLength(0), ((object[,])arg).GetLength(1));
						else if (arg is ExcelMissing)
							return "<<Missing>>"; // Would have been System.Reflection.Missing in previous versions of ExcelDna
						else if (arg is ExcelEmpty)
							return "<<Empty>>"; // Would have been null
						else if (arg is ExcelReference)
              // Calling xlfRefText here requires IsMacroType=true for this function.
							return "Reference: " + XlCall.Excel(XlCall.xlfReftext, arg, true);
						else
							return "!? Unheard Of ?!";
				}
        
					// ExcelDna makes calling the Excel API easy:
					// XlCall.Excel works like Excel4/Excel12, but you just pass the parameters
					// - no need for horrible XLOPERs
					public static double CalcSin(double angle)
					{
						return (double)XlCall.Excel(XlCall.xlfSin, angle);
					}

					[ExcelFunction(IsMacroType=true)]
					public static object GetTheXllName()
					{
						return XlCall.Excel(XlCall.xlfGetWorkspace, 44);
					}

					[ExcelFunction(IsMacroType=true)]
					public static object DoStuffLater()
					{
						double now = (double)XlCall.Excel(XlCall.xlfNow);
						double later = now + 10.0 / (60.0 * 60.0 * 24.0);
						bool ok = (bool)XlCall.Excel(XlCall.xlcOnTime, later, "RingBell");
						if (ok) 
							return "OK " + later;
						else
							return "ERROR";

		
					}

					[ExcelCommand(MenuText="DoStuffLaterMacro")]
					public static void DoStuffLaterMacro()
					{
						double now = (double)XlCall.Excel(XlCall.xlfNow);
						double later = now + 10.0 / (60.0 * 60.0 * 24.0);
						bool ok = (bool)XlCall.Excel(XlCall.xlcOnTime, later, "RingBell");
						if (ok) 
							MessageBox.Show("OK " + later);
						else
							MessageBox.Show("ERROR");

		
					}

					// One dimensional arrays are rows.
					[ExcelFunction(Description="Sorts the given vector")]
					public static double[] SortVector(double[] vector)
					{
						Array.Sort(vector);
						return vector;
					}

					// Arguments can have descriptions too
					[ExcelFunction(Description="Another adding function.", Category="New Functions")]
					public static double AddTwo([ExcelArgument(Description="First one!")]double a, [ExcelArgument(Description="OtherOne!", Name="SecondArg")]double b)
					{
						return a + b;
					}

					// Arrays work as array formulae 
					// This returns a 2-D array with one column
					// and two rows.
					public static object[,] GetSomeStuff()
					{
						return new object[,]{ {3} , {"abc"} };
					}

					// This function will return (accept) only values larger than the current cell contents.
					// Put =IncreaseValue(B1) into A1.
					// Then put different numbers into B1 and watch how A1 changes.
        			[ExcelFunction(IsMacroType=true)]
					public static double IncreaseValue(double newValue)
					{
						ExcelReference reference = (ExcelReference)XlCall.Excel(XlCall.xlfCaller);
						object val = reference.GetValue();
						if (val is double && (double)val > newValue)
							return (double)val;
						return newValue;
					}

					// This is a macro that sets a block of cells
					public static void SetSome()
					{
						ExcelReference r = new ExcelReference(2,5,3,6);
						bool ok  = r.SetValue(new object[,]{{3.4, 8.9}, {"Wow!", ExcelError.ExcelErrorValue}});
					}
          
          public static object DnaSumObjects(object[,] val)
          {
            double sum = 0;
            for (int i = 0; i < val.GetLength(0); i++)
            {
                for (int j = 0; j <  val.GetLength(1); j++)
                {
                  object o = val[i,j];
                  if (o is double)
                  {
                    sum += (double)o;
                  }
                  else if (o is ExcelError)
                  {
                    return o;
                  }
                }
            }
            return sum;
          }

          public static double DnaSumDoubles(double[,] val)
          {
            double sum = 0;
            for (int i = 0; i < val.GetLength(0); i++)
            {
                for (int j = 0; j <  val.GetLength(1); j++)
                {
                  sum += val[i,j]; 
                }
            }
            return sum;
          }

          [ExcelFunction(IsExceptionSafe=true)]
          public static double DnaSumDoublesFastest(double[,] val)
          {
            double sum = 0;
            for (int i = 0; i < val.GetLength(0); i++)
            {
                for (int j = 0; j <  val.GetLength(1); j++)
                {
                  sum += val[i,j]; 
                }
            }
            return sum;
          }

}
			]]>
	</Project>
	<Project Language="VB">
		<Reference Path="System.Windows.Forms.dll"/>
				<![CDATA[
				Imports System.Windows.Forms
				
				Public Module MyTestFunctions
					' Some functions might be quite slow, so should not calculate
					' in the function wizard.
					Function SlowFunction(val)
						If ExcelDnaUtil.IsInFunctionWizard() Then
							SlowFunction = "#IN WIZARD"
						Else
							SlowFunction = val * 2
						End If
					End Function

					' There is easy access to the Excel automation object.
					' ExcelDna.Integration.ExcelDnaUtil.Application returns a reference
					' to the Excel Application COM object.
					' This can be used late-bound from VB, or using the PIA from C#
					' WARNING: In user-defined functions this might be dangerous!!??
					Function GetTheExcelVersion() as double
						GetTheExcelVersion = ExcelDnaUtil.Application.Version
					End Function

          				Function GetTheExcelVersionFromExcelDna() as double
				            GetTheExcelVersionFromExcelDna = ExcelDnaUtil.ExcelVersion		
					End Function 
		
					<ExcelFunction(IsMacroType:=True)> _
					Function DoLater() as String
            
						'XlCall.Excel(XlCall.xlcOnTime, DateTime.Now, "RingBell")

						' This is not recommended, but it works for me.
						ExcelDnaUtil.Application.OnTime(DateTime.Now.AddSeconds(5), "RingBell")
						DoLater = "#WAIT!"
					End Function

					' An easy way to add a menu and menu items for a command....
					' This command sounds a tone and sets cell C3 to the value 42
					<ExcelCommand(MenuName:="&My Menu", MenuText:="Ring &Bell", ShortCut:="^m")> _
					Sub RingBell()
						Console.Beep()
						Dim r as New ExcelReference(3,3)
						r.SetValue(42)
					End Sub

					<ExcelCommand(MenuText:="Say &Hello")> _
					Sub SayIt()
						MessageBox.Show("Hellooooo!")
					End Sub

					' Commands that don't appear on a menu, can be assigned to a button
					' or called from Tools->Macros->Macro and typing in the name.
					Sub SayBye()
						MessageBox.Show("Cheers!")
					End Sub
					
					End Module
				]]>
	</Project>
</DnaLibrary>
